{"version":3,"file":"backbone-orm-99xp.min.js","sources":["../src/backbone-orm-99xp.js"],"sourcesContent":["//Backbone ORM is result of fusion between [backbone](https://backbonejs.org) and \n//[sequelize](https://sequelize.org/) to provide a set of functionalities for business models integrated to ORM.\n// It includes an integration to provide full featured validations with [validate-99xp](https://github.com/brunnofoggia/validate-99xp)\n\n\n// Instructions\n// --------------\n\n// The array entityDefinition may have 2 or 3 items. Same options would've been passed to sequelize.define\n//  1. model name\n//  2. model definition\n//  3. model options\n\n// Before using models it's mandatory that BackboneORM receives Sequelize connection.\n// A good option would be openning a connection before your router were triggered\n\n//     BackboneORM.conn = connection\n\n// Example\n// --------------\n\n//     const EntityDefinition = ['test', {\n//         /* table columns */\n//         id: {\n//             type: Sequelize.INTEGER,\n//             primaryKey: true\n//         },\n//         name: Sequelize.STRING,\n//         age: Sequelize.INTEGER\n//     }, {\n//         freezeTableName: true, timestamps: false,\n//     }];\n//\n//     export default bborm.Model.extend({\n//         entityDefinition: EntityDefinition,\n//         validations: {\n//             \"age\": [[v8n().minLength(1).maxLength(3), 'Invalid Age']]\n//         },\n//     });\n\n// CODE DOCUMENTED BELOW\n// --------------\n\n// --------------\n\n// Baseline setup\n// --------------\nimport _ from 'underscore-99xp';\nimport Backbone from 'backbone';\nimport v from 'validate-99xp';\n\nvar BackboneORM = {};\n\n// Extended Functionallity for Models and Collections\nvar extendedModel = {\n    // PrÃ© set entity into model instance\n    preinitialize() {\n        this.setEntity();\n    },\n    // Load an instance of given class\n    setEntity() {\n        var o = _.result(this, 'entityDefinition') || (BackboneORM.error('Entity Definition not found')),\n            conn = this.getConnection();\n\n        return this.entity = conn.isDefined(o[0]) ?\n            conn.model(o[0]) :\n            conn.define(o[0], o[1] || {}, o[2] || {});\n    },\n    // Retrives connection object from this.conn or BackboneORM.conn\n    getConnection() {\n        return _.result(this, 'conn') || _.result(BackboneORM, 'conn') || (BackboneORM.error('Database connection not set'));\n    },\n    // Customization that redirect calls accordingly to the method asked (read, create, update, patch, delete)\n    sync(method, model, o) {\n        model.trigger('request', method, model, o);\n        return this['sync' + _.capitalize(method)](method, model, o);\n    },\n    // Get row\n    syncRead(method, model, o) {\n        // callbacks for success or error. They trigger Backbone default ones\n        var success = r => {\n            o.success(r.dataValues);\n        };\n        var error = err => {\n            o.error(err);\n        };\n\n        // build where\n        var data = {};\n        if (this.id) {\n            data[this.idAttribute] = this.id;\n        } else {\n            data = this.attributes;\n        }\n\n        // no where no select because this is a model not a collection\n        if (!data) {\n            return;\n        }\n\n        // run select\n        return this.entity.findOne({\n            where: data\n        }).then(r => success(r)).catch(err => error(err));\n    },\n    // Insert row\n    syncCreate(method, model, o) {\n        // callbacks for success or error. They trigger Backbone default ones\n        var success = (r) => {\n            var a = {};\n            /*var a = r.dataValues;*/\n            a[model.idAttribute] = r['null'];\n            o.success(a);\n        };\n        var error = (e) => {\n            var errors = [];\n            for (let x in e.errors) {\n                errors.push(e.errors[x].message);\n            }\n\n            o.error([errors, e]);\n        };\n\n        // remove pk from attributes that will be updated\n        var attrs = _.omit(this.attributes, this.idAttribute);\n        // run insert\n        return this.entity.create(attrs)\n            .then(r => success(r))\n            .catch(e => error(e));\n    },\n    // Update row\n    syncUpdate(method, model, o) {\n        // callbacks for success or error. They trigger Backbone default ones\n        var success = (r) => {\n            o.success(r[0]);\n        };\n        var error = (e) => {\n            var errors = [];\n            for (let x in e.errors) {\n                errors.push(e.errors[x].message);\n            }\n\n            o.error([errors, e]);\n        };\n\n        // remove pk from attributes that will be updated\n        var attrs = _.omit(this.attributes, this.idAttribute);\n        // build where\n        var _o = {\n            where: _.pick(this.attributes, this.idAttribute)\n        };\n        // run update\n        return this.entity.update(attrs, _o)\n            .then(r => success(r))\n            .catch(e => error(e));\n    },\n    // Patch row\n    syncPatch(method, model, o) {\n        return this.syncUpdate(method, model, o);\n    },\n    // Validations list. See [validate-99xp](https://github.com/brunnofoggia/validate-99xp)\n    validations(attrs, options) {\n        return {};\n    },\n    // Dispatcher of validation errors\n    validationErrors(err) {\n        this._res.status(400).send({\n            title: 'Invalid Data',\n            errors: err\n        });\n    }\n};\n\n// Extension of Backbone.Model added to custom behaviors\nBackboneORM.Model = Backbone.Model.extend(_.extend(_.clone(v), extendedModel));\n\nBackboneORM.error = function(msg) {\n    throw new Error(msg);\n};\n\nexport default BackboneORM;\n"],"names":["BackboneORM","extendedModel","preinitialize","setEntity","o","_","result","this","error","conn","getConnection","entity","isDefined","model","define","sync","method","trigger","capitalize","syncRead","data","id","idAttribute","attributes","findOne","where","then","r","success","dataValues","catch","err","syncCreate","attrs","omit","create","a","e","errors","x","push","message","syncUpdate","_o","pick","update","syncPatch","validations","options","validationErrors","_res","status","send","title","Model","Backbone","extend","clone","v","msg","Error"],"mappings":";;;;;;;;;;;6dAmDA,IAAIA,EAAc,GAGdC,EAAgB,CAEhBC,qBACSC,aAGTA,gBACQC,EAAIC,EAAEC,OAAOC,KAAM,qBAAwBP,EAAYQ,MAAM,+BAC7DC,EAAOF,KAAKG,uBAETH,KAAKI,OAASF,EAAKG,UAAUR,EAAE,IAClCK,EAAKI,MAAMT,EAAE,IACbK,EAAKK,OAAOV,EAAE,GAAIA,EAAE,IAAM,GAAIA,EAAE,IAAM,KAG9CM,uBACWL,EAAEC,OAAOC,KAAM,SAAWF,EAAEC,OAAON,EAAa,SAAYA,EAAYQ,MAAM,gCAGzFO,KAAKC,EAAQH,EAAOT,UAChBS,EAAMI,QAAQ,UAAWD,EAAQH,EAAOT,GACjCG,KAAK,OAASF,EAAEa,WAAWF,IAASA,EAAQH,EAAOT,IAG9De,SAASH,EAAQH,EAAOT,OAUhBgB,EAAO,MACPb,KAAKc,GACLD,EAAKb,KAAKe,aAAef,KAAKc,GAE9BD,EAAOb,KAAKgB,WAIXH,SAKEb,KAAKI,OAAOa,QAAQ,CACvBC,MAAOL,IACRM,KAAKC,GAvBMA,CAAAA,IACVvB,EAAEwB,QAAQD,EAAEE,aAsBHD,CAAQD,IAAIG,MAAMC,GApBnBA,CAAAA,IACR3B,EAAEI,MAAMuB,IAmB0BvB,CAAMuB,KAGhDC,WAAWhB,EAAQH,EAAOT,OAkBlB6B,EAAQ5B,EAAE6B,KAAK3B,KAAKgB,WAAYhB,KAAKe,oBAElCf,KAAKI,OAAOwB,OAAOF,GACrBP,KAAKC,GAnBKA,CAAAA,QACPS,EAAI,GAERA,EAAEvB,EAAMS,aAAeK,EAAC,KACxBvB,EAAEwB,QAAQQ,IAeCR,CAAQD,IAClBG,MAAMO,GAdEA,CAAAA,QACLC,EAAS,OACR,IAAIC,KAAKF,EAAEC,OACZA,EAAOE,KAAKH,EAAEC,OAAOC,GAAGE,SAG5BrC,EAAEI,MAAM,CAAC8B,EAAQD,KAQL7B,CAAM6B,KAG1BK,WAAW1B,EAAQH,EAAOT,OAelB6B,EAAQ5B,EAAE6B,KAAK3B,KAAKgB,WAAYhB,KAAKe,aAErCqB,EAAK,CACLlB,MAAOpB,EAAEuC,KAAKrC,KAAKgB,WAAYhB,KAAKe,qBAGjCf,KAAKI,OAAOkC,OAAOZ,EAAOU,GAC5BjB,KAAKC,GApBKA,CAAAA,IACXvB,EAAEwB,QAAQD,EAAE,KAmBDC,CAAQD,IAClBG,MAAMO,GAlBEA,CAAAA,QACLC,EAAS,OACR,IAAIC,KAAKF,EAAEC,OACZA,EAAOE,KAAKH,EAAEC,OAAOC,GAAGE,SAG5BrC,EAAEI,MAAM,CAAC8B,EAAQD,KAYL7B,CAAM6B,KAG1BS,UAAU9B,EAAQH,EAAOT,UACdG,KAAKmC,WAAW1B,EAAQH,EAAOT,IAG1C2C,YAAW,CAACd,EAAOe,KACR,IAGXC,iBAAiBlB,QACRmB,KAAKC,OAAO,KAAKC,KAAK,CACvBC,MAAO,eACPf,OAAQP,MAMpB/B,EAAYsD,MAAQC,EAASD,MAAME,OAAOnD,EAAEmD,OAAOnD,EAAEoD,MAAMC,GAAIzD,IAE/DD,EAAYQ,MAAQ,SAASmD,SACnB,IAAIC,MAAMD"}