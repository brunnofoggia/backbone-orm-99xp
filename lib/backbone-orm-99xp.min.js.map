{"version":3,"file":"backbone-orm-99xp.min.js","sources":["../src/backbone-orm-99xp.js"],"sourcesContent":["//Backbone ORM is result of fusion between [backbone](https://backbonejs.org) and\n//[sequelize](https://sequelize.org/) to provide a set of functionalities for business models integrated to ORM.\n// It includes an integration to provide full featured validations with [validate-99xp](https://github.com/brunnofoggia/validate-99xp)\n\n// Instructions\n// --------------\n\n// The array entityDefinition may have 2 or 3 items. Same options would've been passed to sequelize.define\n//  1. model name\n//  2. model definition\n//  3. model options\n\n// Before using models it's mandatory that BackboneORM receives Sequelize connection.\n// A good option would be openning a connection before your router were triggered\n\n//     BackboneORM.conn = connection\n\n// Example\n// --------------\n\n//     const EntityDefinition = ['test', {\n//         /* table columns */\n//         id: {\n//             type: Sequelize.INTEGER,\n//             primaryKey: true\n//         },\n//         name: Sequelize.STRING,\n//         age: Sequelize.INTEGER\n//     }, {\n//         freezeTableName: true, timestamps: false,\n//     }];\n//\n//     export default bborm.Model.extend({\n//         entityDefinition: EntityDefinition,\n//         validations: {\n//             \"age\": [[v8n().minLength(1).maxLength(3), 'Invalid Age']]\n//         },\n//     });\n\n// CODE DOCUMENTED BELOW\n// --------------\n\n// --------------\n\n// Baseline setup\n// --------------\nimport _ from \"underscore-99xp\";\nimport Backbone from \"backbone\";\nimport bbx from \"backbone-99xp\";\nimport v from \"validate-99xp\";\nimport AppException from \"app-exception\";\n\nvar BackboneORM = {};\n\nvar extended = {\n    _migration: { alter: true },\n    migration() {\n        var canMigrate = _.result(this, \"canMigrate\");\n        if (!canMigrate) {\n            return false;\n        }\n        return this._migration;\n    },\n    syncMigration() {\n        var migration = _.result(this, \"migration\");\n        if (!migration) {\n            return;\n        }\n        migration === true && (migration = {});\n\n        return this.entity.sync(migration);\n    },\n    defineEntity(definition) {\n        var o,\n            conn = this.getConnection();\n        switch (true) {\n            case _.isArray(definition):\n                o = conn.isDefined(definition[0])\n                    ? conn.model(definition[0])\n                    : conn.define(\n                          definition[0],\n                          definition[1] || {},\n                          definition[2] || {}\n                      );\n                break;\n            case typeof definition === \"function\":\n                o = definition.sequelize ? definition : definition();\n                break;\n        }\n        return o;\n    },\n};\n\n// Extended Functionallity for Models and Collections\nvar extendedModel = {\n    // Pré set entity into model instance\n    preinitialize() {\n        this.setEntity();\n    },\n    // Load an instance of given class\n    setEntity() {\n        if (this.entity) {\n            return this.entity;\n        }\n\n        var o =\n            _.result(this, \"entityDefinition\") ||\n            BackboneORM.error(\"Entity Definition not found\");\n        this.entity = this.defineEntity(o);\n\n        return this.entity;\n    },\n    // Retrives connection object from this.conn or BackboneORM.conn\n    getConnection() {\n        return (\n            _.result(this, \"conn\") ||\n            _.result(BackboneORM, \"conn\") ||\n            BackboneORM.error(\"Database connection not set\")\n        );\n    },\n    // Customization that redirect calls accordingly to the method asked (read, create, update, patch, delete)\n    sync(method, model, o) {\n        model.trigger(\"request\", method, model, o);\n        return this[\"sync\" + _.capitalize(method)](method, model, o);\n    },\n    // Get row\n    syncRead(method, model, o) {\n        // callbacks for success or error. They trigger Backbone default ones\n        var success = (r) => {\n            o.success(r.dataValues);\n        };\n\n        // build where\n        var data = {};\n        if (this.id) {\n            data[this.idAttribute] = this.id;\n        } else {\n            data = this.attributes;\n        }\n\n        // no where no select because this is a model not a collection\n        if (!data) {\n            return;\n        }\n\n        // run select\n        return this.entity\n            .findOne({\n                where: data,\n                order: [[this.idAttribute, \"DESC\"]],\n            })\n            .then((r) => {\n                this.formatMe();\n                success(r);\n            })\n            .catch(_.bind(this.handleSyncError, this));\n    },\n    // Insert row\n    syncCreate(method, model, o) {\n        // callbacks for success or error. They trigger Backbone default ones\n        var success = (r) => {\n            var a = {};\n            a[model.idAttribute] = r.dataValues[model.idAttribute];\n            o.success(a);\n        };\n\n        // remove pk from attributes that will be updated\n        var attrs = this.unformat(\n            _.omit(_.clone(this.attributes), this.idAttribute)\n        );\n        // run insert\n        return this.entity\n            .create(attrs)\n            .then((r) => success(r))\n            .catch(_.bind(this.handleSyncError, this));\n    },\n    // Update row\n    syncUpdate(method, model, o) {\n        // callbacks for success or error. They trigger Backbone default ones\n        var success = (r) => {\n            o.success(r[0]);\n        };\n\n        // remove pk from attributes that will be updated\n        var attrs = this.unformat(\n            _.omit(_.clone(this.attributes), this.idAttribute)\n        );\n        // build where\n        var _o = {\n            where: _.pick(this.attributes, this.idAttribute),\n        };\n        // run update\n        return this.entity\n            .update(attrs, _o)\n            .then((r) => success(r))\n            .catch(_.bind(this.handleSyncError, this));\n    },\n    // Patch row\n    syncPatch(method, model, o) {\n        return this.syncUpdate(method, model, o);\n    },\n    // Handle Sync Errors\n    handleSyncError(e) {\n        var errors = [];\n\n        if (_.isArray(e.errors)) {\n            for (let x in e.errors) {\n                errors.push(e.errors[x].message);\n            }\n        } else {\n            errors.push(e.message || e);\n        }\n        this.trigger(\"error\", e, errors);\n    },\n    // Validations list. See [validate-99xp](https://github.com/brunnofoggia/validate-99xp)\n    validations(attrs, options) {\n        return {};\n    },\n    // Dispatcher of validation errors\n    validationErrors(err) {\n        return BackboneORM.error(\n            {\n                title: \"Invalid Data\",\n                errors: err,\n            },\n            0,\n            400\n        );\n    },\n    // Allows to set a pair of listeners where one turns the other off after being executed.\n    // Both parameters are arrays composed like [event, callback]\n    once(c1, c2) {\n        if (_.isArray(c1) && _.isArray(c2)) {\n            this.once(\n                c1[0],\n                _.partial(\n                    function (c1, c2) {\n                        this.off(c2[0], c2[1]);\n\n                        var args = _.toArray(arguments);\n                        args.shift();\n                        args.shift();\n\n                        c1[1].apply(null, args);\n                    },\n                    c1,\n                    c2\n                )\n            );\n\n            this.once(\n                c2[0],\n                _.partial(\n                    function (c1, c2) {\n                        this.off(c1[0], c1[1]);\n\n                        var args = _.toArray(arguments);\n                        args.shift();\n                        args.shift();\n\n                        c2[1].apply(null, args);\n                    },\n                    c1,\n                    c2\n                )\n            );\n        }\n\n        return _.bind(Backbone.Model.prototype.once, this)(c1, c2);\n    },\n    save() {\n        return new Promise((resolve, reject) => {\n            this.once(\n                [\n                    \"sync\",\n                    () => {\n                        resolve(this);\n                    },\n                ],\n                [\n                    \"error\",\n                    (err) => {\n                        reject(err);\n                    },\n                ]\n            );\n\n            _.bind(bbx.model.prototype.save, this)();\n        });\n    },\n};\n\n// Extension of Backbone.Model added to custom behaviors\nBackboneORM.Model = bbx.model.extend(\n    _.extend(_.clone(v), extended, extendedModel)\n);\n\nvar extendedCollection = {\n    // Pré set entity into collection instance\n    preinitialize() {\n        this.setModelBase();\n        this.setEntity();\n    },\n    setModelBase() {\n        var ModelBase = this.model ? this.model : BackboneORM.Model.extend();\n        this.modelBase = new ModelBase();\n    },\n    // Load an instance of given class\n    setEntity() {\n        if (this.entity) {\n            return this.entity;\n        }\n\n        var o =\n            _.result(this, \"entityDefinition\") ||\n            _.result(this.modelBase, \"entityDefinition\") ||\n            BackboneORM.error(\"Entity Definition not found\");\n        this.entity = this.defineEntity(o);\n\n        return this.entity;\n    },\n    // Retrives connection object from this.conn or BackboneORM.conn\n    getConnection() {\n        return (\n            _.result(this, \"conn\") ||\n            _.result(this.modelBase, \"conn\") ||\n            _.result(BackboneORM, \"conn\") ||\n            BackboneORM.error(\"Database connection not set\")\n        );\n    },\n    // Transform sequelize rows into models\n    parse(r) {\n        if (_.isArray(r) && _.size(r) > 0) {\n            this.add(\n                _.map(r, (row) => {\n                    return row.dataValues;\n                })\n            );\n        }\n    },\n    // find all records accordingly to the conditions\n    findAll(where = {}) {\n        return new Promise((resolve, reject) => {\n            return this.entity\n                .findAll({\n                    where: where,\n                })\n                .then((r) => {\n                    this.parse(r);\n                    this.formatModels();\n                    resolve(this);\n                })\n                .catch((err) => {\n                    reject(err);\n                });\n        });\n    },\n    // Save all models\n    saveAll() {\n        return new Promise((resolve, reject) => {\n            var size = this.models.length,\n                c = () => {\n                    if (--size > 0) {\n                        return;\n                    }\n                    // resolve after save all models\n                    resolve(this);\n                };\n\n            // validate all models first\n            var errors = [];\n            for (let x in this.models) {\n                var validate = this.models[x].validate(this.model.attributes, {\n                    validateAll: true,\n                });\n                if (validate) {\n                    errors = errors.concat(validate);\n                }\n            }\n            if (errors.length) {\n                reject(errors);\n            }\n\n            // save each model\n            for (let x in this.models) {\n                var m = this.models[x];\n                m.save()\n                    .then(() => c())\n                    .catch((err) => {\n                        reject(err);\n                    });\n            }\n        });\n    },\n};\n\nBackboneORM.Collection = bbx.collection.extend(\n    _.extend({}, extended, extendedCollection)\n);\n\nBackboneORM.error = function (msg, code = 0, status = 500) {\n    throw new AppException(msg, code, status);\n};\n\nexport default BackboneORM;\n"],"names":["BackboneORM","extended","_migration","alter","migration","_","result","this","syncMigration","entity","sync","defineEntity","definition","o","conn","getConnection","isArray","isDefined","model","define","sequelize","extendedModel","preinitialize","setEntity","error","method","trigger","capitalize","syncRead","data","id","idAttribute","attributes","findOne","where","order","then","r","formatMe","success","dataValues","catch","bind","handleSyncError","syncCreate","attrs","unformat","omit","clone","create","a","syncUpdate","_o","pick","update","syncPatch","e","errors","x","push","message","validations","options","validationErrors","err","title","once","c1","c2","partial","off","args","toArray","arguments","shift","apply","Backbone","Model","prototype","save","Promise","resolve","reject","bbx","extend","v","extendedCollection","setModelBase","ModelBase","modelBase","parse","size","add","map","row","findAll","formatModels","saveAll","models","length","c","validate","validateAll","concat","Collection","collection","msg","code","status","AppException"],"mappings":"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"}