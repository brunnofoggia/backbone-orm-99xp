{"version":3,"file":"backbone-orm-99xp.min.js","sources":["../src/backbone-orm-99xp.js"],"sourcesContent":["//Backbone ORM is result of fusion between [backbone](https://backbonejs.org) and \n//[sequelize](https://sequelize.org/) to provide a set of functionalities for business models integrated to ORM.\n// It includes an integration to provide full featured validations with [validate-99xp](https://github.com/brunnofoggia/validate-99xp)\n\n\n// Instructions\n// --------------\n\n// The array entityDefinition may have 2 or 3 items. Same options would've been passed to sequelize.define\n//  1. model name\n//  2. model definition\n//  3. model options\n\n// Before using models it's mandatory that BackboneORM receives Sequelize connection.\n// A good option would be openning a connection before your router were triggered\n\n//     BackboneORM.conn = connection\n\n// Example\n// --------------\n\n//     const EntityDefinition = ['test', {\n//         /* table columns */\n//         id: {\n//             type: Sequelize.INTEGER,\n//             primaryKey: true\n//         },\n//         name: Sequelize.STRING,\n//         age: Sequelize.INTEGER\n//     }, {\n//         freezeTableName: true, timestamps: false,\n//     }];\n//\n//     export default bborm.Model.extend({\n//         entityDefinition: EntityDefinition,\n//         validations: {\n//             \"age\": [[v8n().minLength(1).maxLength(3), 'Invalid Age']]\n//         },\n//     });\n\n// CODE DOCUMENTED BELOW\n// --------------\n\n// --------------\n\n// Baseline setup\n// --------------\nimport _ from 'underscore-99xp';\nimport Backbone from 'backbone';\nimport v from 'validate-99xp';\n\nvar BackboneORM = {};\n\nvar extended = {\n    _migration: {alter: true},\n    migration() {\n        var canMigrate = _.result(this, 'canMigrate');\n        if (!canMigrate) {\n            return false;\n        }\n        return this._migration;\n    },\n    syncMigration() {\n        var migration = _.result(this, 'migration');\n        if (!migration) {\n            return;\n        }\n        migration === true && (migration = {});\n\n        return this.entity.sync(migration);\n    },\n    defineEntity(definition) {\n        var o,\n            conn = this.getConnection();\n        switch (true) {\n            case _.isArray(definition):\n                o = conn.isDefined(o[0]) ?\n                conn.model(o[0]) :\n                conn.define(o[0], o[1] || {}, o[2] || {})\n                break;\n            case typeof definition === 'function':\n                o = definition.sequelize ? definition : definition();\n                break;\n        }\n        return o;\n    },\n};\n\n// Extended Functionallity for Models and Collections\nvar extendedModel = {\n    // Pré set entity into model instance\n    preinitialize() {\n        this.setEntity();\n    },\n    // Load an instance of given class\n    setEntity() {\n        if (this.entity) {\n            return this.entity;\n        }\n\n        var o = _.result(this, 'entityDefinition') || (BackboneORM.error('Entity Definition not found'));\n        this.entity = this.defineEntity(o);\n\n        return this.entity;\n    },\n    // Retrives connection object from this.conn or BackboneORM.conn\n    getConnection() {\n        return _.result(this, 'conn') || _.result(BackboneORM, 'conn') || (BackboneORM.error('Database connection not set'));\n    },\n    // Customization that redirect calls accordingly to the method asked (read, create, update, patch, delete)\n    sync(method, model, o) {\n        model.trigger('request', method, model, o);\n        return this['sync' + _.capitalize(method)](method, model, o);\n    },\n    // Get row\n    syncRead(method, model, o) {\n        // callbacks for success or error. They trigger Backbone default ones\n        var success = r => {\n            o.success(r.dataValues);\n        };\n\n        // build where\n        var data = {};\n        if (this.id) {\n            data[this.idAttribute] = this.id;\n        } else {\n            data = this.attributes;\n        }\n\n        // no where no select because this is a model not a collection\n        if (!data) {\n            return;\n        }\n\n        // run select\n        return this.entity.findOne({\n            where: data\n        }).then(r => success(r)).catch(_.bind(this.handleSyncError, this));\n    },\n    // Insert row\n    syncCreate(method, model, o) {\n        // callbacks for success or error. They trigger Backbone default ones\n        var success = (r) => {\n            var a = {};\n            /*var a = r.dataValues;*/\n            a[model.idAttribute] = r['null'];\n            o.success(a);\n        };\n\n        // remove pk from attributes that will be updated\n        var attrs = _.omit(this.attributes, this.idAttribute);\n        // run insert\n        return this.entity.create(attrs)\n            .then(r => success(r))\n            .catch(_.bind(this.handleSyncError, this));\n    },\n    // Update row\n    syncUpdate(method, model, o) {\n        // callbacks for success or error. They trigger Backbone default ones\n        var success = (r) => {\n            o.success(r[0]);\n        };\n\n        // remove pk from attributes that will be updated\n        var attrs = _.omit(this.attributes, this.idAttribute);\n        // build where\n        var _o = {\n            where: _.pick(this.attributes, this.idAttribute)\n        };\n        // run update\n        return this.entity.update(attrs, _o)\n            .then(r => success(r))\n            .catch(_.bind(this.handleSyncError, this));\n    },\n    // Patch row\n    syncPatch(method, model, o) {\n        return this.syncUpdate(method, model, o);\n    },\n    // Handle Sync Errors\n    handleSyncError(e) {\n        var errors = [];\n\n        if (_.isArray(e.errors)) {\n            for (let x in e.errors) {\n                errors.push(e.errors[x].message);\n            }\n        } else {\n            errors.push(e.message || e);\n        }\n        this.trigger('error', e, errors);\n    },\n    // Validations list. See [validate-99xp](https://github.com/brunnofoggia/validate-99xp)\n    validations(attrs, options) {\n        return {};\n    },\n    // Dispatcher of validation errors\n    validationErrors(err) {\n        this._res.status(400).send({\n            title: 'Invalid Data',\n            errors: err\n        });\n    },\n    // Allows to set a pair of listeners where one turns the other off after being executed.\n    // Both parameters are arrays composed like [event, callback]\n    once(c1, c2) {\n        if (_.isArray(c1) && _.isArray(c2)) {\n            this.once(c1[0], _.partial(function (c1, c2) {\n                this.off(c2[0], c2[1]);\n                \n                var args = _.toArray(arguments);\n                args.shift();args.shift();\n\n                c1[1].apply(null, args);\n            }, c1, c2));\n\n            this.once(c2[0], _.partial(function (c1, c2) {\n                this.off(c1[0], c1[1]);\n        \n                var args = _.toArray(arguments);\n                args.shift();args.shift();\n\n                c2[1].apply(null, args);\n            }, c1, c2));\n        }\n\n        return _.bind(Backbone.Model.prototype.once, this)(c1, c2);\n    }\n};\n\n// Extension of Backbone.Model added to custom behaviors\nBackboneORM.Model = Backbone.Model.extend(_.extend(_.clone(v), extended, extendedModel));\n\nvar extendedCollection = {\n    // Pré set entity into collection instance\n    preinitialize() {\n        this.setModelBase();\n        this.setEntity();\n    },\n    setModelBase() {\n        var ModelBase = (this.model ? this.model : BackboneORM.Model.extend());\n        this.modelBase = new ModelBase;\n    },\n    // Load an instance of given class\n    setEntity() {\n        if (this.entity) {\n            return this.entity;\n        }\n\n        var o = _.result(this, 'entityDefinition') || _.result(this.modelBase, 'entityDefinition') || BackboneORM.error('Entity Definition not found');\n        this.entity = this.defineEntity(o);\n        \n        return this.entity;\n    },\n    // Retrives connection object from this.conn or BackboneORM.conn\n    getConnection() {\n        return _.result(this, 'conn') || _.result(this.modelBase, 'conn') || _.result(BackboneORM, 'conn') || BackboneORM.error('Database connection not set');\n    },\n    // Transform sequelize rows into models\n    parse(r, sc, ec) {\n        if (_.isArray(r) && _.size(r) > 0) {\n            this.add(_.map(r, (row) => {\n                return (row.dataValues);\n            }));\n        }\n\n        sc(this);\n    },\n    // find all records accordingly to the conditions\n    findAll(where = {}, sc, ec) {\n        typeof ec !== 'function' && (ec = () => { });\n\n        return this.entity.findAll({\n            where: where\n        }).then(r => this.parse(r, sc, ec)).catch(err => ec(err));\n    },\n    // Save all models\n    saveAll(sc, ec) {\n        var size = this.models.length,\n            c = () => {\n                if (--size > 0) { return; }\n                typeof sc === 'function' && sc(this);\n            };\n\n        typeof ec !== 'function' && (ec = () => { });\n\n        for (var x in this.models) {\n            var m = this.models[x];\n            m.once(['sync', c], ['error', ec]);\n            m.save();\n        }\n    }\n};\n\nBackboneORM.Collection = Backbone.Collection.extend(_.extend({}, extended, extendedCollection));\n\n\nBackboneORM.error = function (msg) {\n    throw new Error(msg);\n};\n\nexport default BackboneORM;\n"],"names":["BackboneORM","extended","_migration","alter","migration","_","result","this","syncMigration","entity","sync","defineEntity","definition","o","conn","getConnection","isArray","isDefined","model","define","sequelize","extendedModel","preinitialize","setEntity","error","method","trigger","capitalize","syncRead","data","id","idAttribute","attributes","findOne","where","then","r","success","dataValues","catch","bind","handleSyncError","syncCreate","attrs","omit","create","a","syncUpdate","_o","pick","update","syncPatch","e","errors","x","push","message","validations","options","validationErrors","err","_res","status","send","title","once","c1","c2","partial","off","args","toArray","arguments","shift","apply","Backbone","Model","prototype","extend","clone","v","extendedCollection","setModelBase","ModelBase","modelBase","parse","sc","ec","size","add","map","row","findAll","saveAll","models","length","c","m","save","Collection","msg","Error"],"mappings":"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"}